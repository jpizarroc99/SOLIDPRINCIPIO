S - Single Responsibility Principle (SRP)
Principio de Responsabilidad √önica

‚úÖ ¬øQu√© significa?
Una clase debe tener una √∫nica raz√≥n para cambiar, es decir, una sola responsabilidad o funci√≥n bien definida.

Esto quiere decir que cada clase debe encargarse de una sola parte del comportamiento del sistema, y nada m√°s. Si una clase hace muchas cosas distintas, es m√°s dif√≠cil de mantener, probar o modificar sin romper otras funcionalidades.

üß† Ejemplo simple:
Sup√≥n que tienes una clase Reporte que:

Genera un reporte de ventas.

Imprime el reporte.

Lo guarda en disco.

java
Copiar
Editar
public class Reporte {
    public void generar() {
        // L√≥gica de generaci√≥n
    }

    public void imprimir() {
        // L√≥gica de impresi√≥n
    }

    public void guardar() {
        // L√≥gica de guardado
    }
}
Esta clase viola SRP porque tiene tres responsabilidades: generar, imprimir y guardar.

‚úÖ Aplicando SRP correctamente:
Separas esas responsabilidades en diferentes clases:

java
Copiar
Editar
public class GeneradorReporte {
    public void generar() {
        // Solo genera el contenido del reporte
    }
}

public class ImpresoraReporte {
    public void imprimir(String reporte) {
        // Solo se encarga de imprimir
    }
}

public class GuardadorReporte {
    public void guardar(String reporte) {
        // Solo se encarga de guardar
    }
}
Ahora, cada clase tiene una sola responsabilidad, y puede cambiar independientemente si cambia la l√≥gica de generaci√≥n, impresi√≥n o guardado.

üß© Beneficios del SRP:
C√≥digo m√°s modular y legible.

Facilita las pruebas unitarias.

Favorece la reutilizaci√≥n de componentes.

Reduce el riesgo de errores colaterales al hacer cambios.

¬øTe gustar√≠a que te d√© un ejemplo m√°s completo en Java aplicando el SRP con un caso m√°s realista como una aplicaci√≥n bancaria o de usuarios? Puedes seguir con ejemplo Java de SRP, los otros principios de SOLID o por qu√© SRP mejora el mantenimiento.